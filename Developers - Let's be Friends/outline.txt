I'm a DBA. Which means that my most important jobs are:
 * To not spend all of the company's money to make up for inefficiencies
 * To make sure data is delivered accurately and quickly
 * To protect the integrity of the company's data

You're developers, and I want us to be friends. But sometimes, you make it really difficult. Let's talk about that.

Talk to me!
 * Talk to me about the type of data you're working with
  * Good data type choices = more efficient
 * Talk to me about the rules around your data
  * Foreign key constraints
  * Field constraints
  * I don't trust your app to protect the integrity of the data
 * Talk to me about how your application is querying the database
  * Direct queries vs. stored procs vs. prepared statements
 * Talk to me about how many databases you're going to need
  * Multi-tenant - one DB per tenant vs. all tenants in one DB
 * Don't wait for me to come looking for you when your query hammers the database
 * Stored proc - include debug and verify modes
 * Come to me with your queries and let's work through them together
Inefficiencies
 * Why do we care?
  * Memory's cheap, but SQL Server has memory limits on everything but Enterprise Edition
  * CPUs have *lots* of cores (up to 72), but again - licensing limits
 * Each time you run a query, SQL Server looks at your query, figures out a good enough way to run it, then caches that in memory
   * If you change *anything*, it looks like a completely new query and it'll go through that process all over again
   * A single space will double the RAM usage and burn CPU while recompiling
   * From your application, different criteria in a plain string will stuff the plan cache
   * Solution: Parameterized queries
 * Write a good WHERE clause
  * Don't filter in the app, be as specific as possible when telling SQL Server what you want
  * HME example - one property, copy/paste Excel vs. WHERE (20 seconds vs. sub-second)
  * SARGability
 * Give SQL Server every bit of information possible so that it can make a good decision
  * The more SQL Server knows about your data, the less work it has to do
 * Solution: Know your indexes, know your data types, know your relationships
Accuracy & Speed
 * DISTINCT is a code smell
  * Usually a bad/incomplete JOIN
 * TOP may be misunderstood
  * Still has to do all the work
  * Unless you specify an ORDER, you don't know what you'll get
 * NOLOCK is not a Turbo button!
  * There are places it's OK to use. We can talk about it
 * Loops/cursors
  * In most cases, if you find yourself saying "for each record I have here, I need to do X" you're probably wrong